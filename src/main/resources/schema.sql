DROP ALL OBJECTS;

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID       INTEGER AUTO_INCREMENT,
    USER_EMAIL    CHARACTER VARYING(255) NOT NULL,
    USER_LOGIN    CHARACTER VARYING(255) NOT NULL,
    USER_NAME     CHARACTER VARYING(255),
    USER_BIRTHDAY DATE,
    CONSTRAINT USERS_PK
        PRIMARY KEY (USER_ID)
);
CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY (EXHAUSTED),
    MPA_NAME VARCHAR(25) NOT NULL,
    CONSTRAINT MPA_PK
        PRIMARY KEY (MPA_ID)
);
CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID             INTEGER AUTO_INCREMENT,
    FILM_NAME           CHARACTER VARYING(255)  NOT NULL,
    FILM_DESCRIPTION    CHARACTER VARYING(255) NOT NULL,
    FILM_RELEASE_DATE   DATE                   NOT NULL,
    FILM_DURATION       INTEGER                NOT NULL,
    FILM_RATE           INTEGER DEFAULT 0,
    MPA_ID              INTEGER                NOT NULL,
    FILM_LIKES INTEGER DEFAULT 0,
    CONSTRAINT FILMS_PK
        PRIMARY KEY (FILM_ID),
    CONSTRAINT FILMS_FK
        FOREIGN KEY (MPA_ID) REFERENCES MPA (MPA_ID)
);
CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID INTEGER AUTO_INCREMENT,
    GENRE_NAME CHARACTER VARYING(50) NOT NULL,
    CONSTRAINT GENRES_PK
        PRIMARY KEY (GENRE_ID)
);
CREATE TABLE IF NOT EXISTS FRIENDS
(
    FIRST_USER_ID INTEGER NOT NULL,
    SECOND_USER_ID INTEGER NOT NULL,
    PROOF BOOLEAN DEFAULT FALSE NOT NULL,
    CONSTRAINT FRIENDS_FIRST_USER_ID_FK
        FOREIGN KEY (FIRST_USER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT FRIENDS_SECOND_USER_ID_FK
        FOREIGN KEY (SECOND_USER_ID) REFERENCES USERS (USER_ID)
);
CREATE TABLE IF NOT EXISTS FILM_GENRES
(
    FILM_ID  INTEGER NOT NULL,
    GENRE_ID INTEGER NOT NULL,
    CONSTRAINT FILM_TO_GENRE_FILMS_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID),
    CONSTRAINT FILM_TO_GENRE_GENRE_FK
        FOREIGN KEY (GENRE_ID) REFERENCES GENRES (GENRE_ID)
);
CREATE TABLE IF NOT EXISTS LIKES
(
    FILM_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    CONSTRAINT LIKES_USERS_ID_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT LIKES_FILMS_ID_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID)
);